// Generated by Haxe 3.4.3
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.filter = function(it,f) {
	var l = new List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	com_ls3d_HTMLTrace.init();
	Main.map();
	Main.filter();
	Main.reduce();
	Main.mapAsReduce();
	Main.filterAsReduce();
	Main.advancedListOperations();
};
Main.compose2 = function(f,g) {
	return function(x) {
		var tmp = g(x);
		return f(tmp);
	};
};
Main.map = function() {
	var one = function() {
		return 1;
	};
	var two = function() {
		return 2;
	};
	var three = function() {
		return 3;
	};
	var result1 = [one,two,three].map(function(f) {
		return f();
	});
	haxe_Log.trace("[one, two, three].map: " + Std.string(result1),{ fileName : "Main.hx", lineNumber : 30, className : "Main", methodName : "map"});
	var increment = function(v) {
		return ++v;
	};
	var decrement = function(v1) {
		return --v1;
	};
	var square = function(v2) {
		return v2 * v2;
	};
	var $double = function(v3) {
		return v3 * 2;
	};
	var result2 = [increment,decrement,square].map(function(fn) {
		return Main.compose2(fn,$double);
	}).map(function(fn1) {
		return fn1(3);
	});
	haxe_Log.trace("[increment, decrement, square].map <- 3: " + Std.string(result2),{ fileName : "Main.hx", lineNumber : 41, className : "Main", methodName : "map"});
};
Main.filter = function() {
	var isOdd = function(v) {
		return v % 2 == 1;
	};
	var isEven = function(v1) {
		return !isOdd(v1);
	};
	var result3 = [1,2,3,4,5].filter(isOdd);
	haxe_Log.trace("[1, 2, 3, 4, 5].filter( isOdd ): " + Std.string(result3),{ fileName : "Main.hx", lineNumber : 53, className : "Main", methodName : "filter"});
	haxe_Log.trace("isOdd( 3 ): " + Std.string(isOdd(3)),{ fileName : "Main.hx", lineNumber : 56, className : "Main", methodName : "filter"});
	haxe_Log.trace("isEven( 2 ): " + Std.string(isEven(2)),{ fileName : "Main.hx", lineNumber : 57, className : "Main", methodName : "filter"});
	var filterInIsEven = Main.filterIn(isEven,[1,2,3,4,5]);
	haxe_Log.trace("filterIn( isOdd, [1, 2, 3, 4, 5] ): " + Std.string(Main.filterIn(isOdd,[1,2,3,4,5])),{ fileName : "Main.hx", lineNumber : 61, className : "Main", methodName : "filter"});
	haxe_Log.trace("filterIn( isEven, [1, 2, 3, 4, 5] ): " + Std.string(Main.filterIn(isEven,[1,2,3,4,5])),{ fileName : "Main.hx", lineNumber : 62, className : "Main", methodName : "filter"});
};
Main.not = function(predicateFn) {
	return function(v) {
		return !predicateFn(v);
	};
};
Main.filterIn = function(predicateFn,iterable) {
	return Lambda.filter(iterable,predicateFn);
};
Main.filterOut = function(predicateFn,iterable) {
	return Main.filterIn(Main.not(predicateFn),iterable);
};
Main.reduce = function() {
	var reduced = Lambda.fold([5,10,15],function(product,v) {
		return product * v;
	},3);
	haxe_Log.trace("[5, 10, 15].fold( product * v, 3 ): " + reduced,{ fileName : "Main.hx", lineNumber : 86, className : "Main", methodName : "reduce"});
	var hyphenate = function(str,$char) {
		return str + "-" + $char;
	};
	haxe_Log.trace("[\"a\", \"b\", \"c\"].fold( hyphenate ): " + Lambda.fold(["a","b","c"],hyphenate,""),{ fileName : "Main.hx", lineNumber : 89, className : "Main", methodName : "reduce"});
	var a = ["a","b","c"];
	a.reverse();
	haxe_Log.trace("reversed [\"a\", \"b\", \"c\"].fold( hyphenate, \"\" ): " + Lambda.fold(a,hyphenate,""),{ fileName : "Main.hx", lineNumber : 93, className : "Main", methodName : "reduce"});
};
Main.mapAsReduce = function() {
	var $double = function(v) {
		return v * 2;
	};
	var d1 = [1,2,3,4,5].map($double);
	haxe_Log.trace("[1,2,3,4,5].map( double ): " + Std.string(d1),{ fileName : "Main.hx", lineNumber : 102, className : "Main", methodName : "mapAsReduce"});
	var rm = function(v1,a) {
		a.push($double(v1));
		return a;
	};
	var reduceMap = rm;
	var d2 = Lambda.fold([1,2,3,4,5],reduceMap,[]);
	haxe_Log.trace("[1,2,3,4,5].fold( reduceMap, [] ): " + Std.string(d2),{ fileName : "Main.hx", lineNumber : 110, className : "Main", methodName : "mapAsReduce"});
};
Main.filterAsReduce = function() {
	var isOdd = function(v) {
		return v % 2 == 1;
	};
	var f1 = [1,2,3,4,5].filter(isOdd);
	haxe_Log.trace("[1,2,3,4,5].filter( isOdd ): " + Std.string(f1),{ fileName : "Main.hx", lineNumber : 119, className : "Main", methodName : "filterAsReduce"});
	var rf = function(v1,a) {
		if(isOdd(v1)) {
			a.push(v1);
		}
		return a;
	};
	var reduceFilter = rf;
	var f2 = Lambda.fold([1,2,3,4,5],reduceFilter,[]);
	haxe_Log.trace("[1,2,3,4,5].fold( reduceFilter, [] ): " + Std.string(f2),{ fileName : "Main.hx", lineNumber : 127, className : "Main", methodName : "filterAsReduce"});
};
Main.flatten = function(arr) {
	return Lambda.fold(arr,function(v,list) {
		return list.concat((v instanceof Array) && v.__enum__ == null ? Main.flatten(v) : v);
	},[]);
};
Main.advancedListOperations = function() {
	var f1 = Main.flatten([[0,1],2,3,[4,[5,6,7],[8,[9,[10,[11,12],13]]]]]);
	haxe_Log.trace("flatten( [[0,1],2,3,[4,[5,6,7],[8,[9,[10,[11,12],13]]]]] ): " + Std.string(f1),{ fileName : "Main.hx", lineNumber : 140, className : "Main", methodName : "advancedListOperations"});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var com_ls3d_HTMLTrace = function() { };
com_ls3d_HTMLTrace.__name__ = true;
com_ls3d_HTMLTrace.init = function() {
	haxe_Log.trace = function(v,infos) {
		var div = window.document.createElement("div");
		div.innerHTML = v;
		window.document.body.appendChild(div);
	};
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Main.main();
})();
